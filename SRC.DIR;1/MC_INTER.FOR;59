
	SUBROUTINE MCGUIDE(nwav,wave,wgxe,sgxe,syme,fille,
     &                      ftranse,delole,avrefe)

*	This is the 'latest' (8-jan-1985) version (FKGUIDE43 on the IBM).
*	The only change from FKGUIDE42 (the written up version) seems to
*	be an extra write statement putting out the total number of transmitted
*	neutrons.

*	Further modified to accomodate neutrons of Gamma > Gamma_c which are
*	incident on the sample but do not suffer reflection within the (short)
*	guide. Also, now Gamma can be different in different regions (changed
*	on 19.6.85).

*	Modifications were done to get a more user friendly program. Modified 
*	by David Martin on 10.02.93.

*	Latest modification includes the moderator flux intensity. Changed on
*	19.05.93 by David Martin.

*	To ensure the randomness of positions and velocities, the random number
*	generator used is "g05daf" from the NAG library. It uses a seed
*	provided by "g05ccf" which ensures a non-repeteable sequence. 	

*	Modified on 08.04.94 by David Martin to include the different 
*	reflections coefficients of a supermirror surface.
                  
*	Modified on 27.04.95 by Stuart Campbell to include the possibility 
*       of a polarizing bender section of guide.
*	Also different reflection coefficients for the polarizing bender
*	surfaces.
                  
*	Modifications on 19.5.95 by Stuart Campbell 
* 	"spin" of the neutrons is taken into account when calculating
*	each reflection.

*	(20/11/96) Gravitation effects included by Stuart Campbell
 
        IMPLICIT REAL (A-H,O-Z)
        REAL G05CBF, G05CCF, G05DAF

*       Extra definitions for VAX

	INTEGER*2 LIB$DATE_TIME, LIB$INIT_TIMER, LIB$SHOW_TIMER, ISTATUS
	INTEGER*2 HANDLE, RANDOM_ANSWER
	CHARACTER*40 DATETIME, NAME
        INTEGER SPINUP,SPINDW, NDATA, BD_REG1, BD_REG2
	REAL XSM(500), FSM(500)

	REAL INT_PROB,ID,INTERREF,MVAL
      	REAL TGX(10,10),TS(10,10),TITLE(20),MX,MZ,TXX(10),TSE(10,10)
     &         , TITL1(20),TITL2(20),TITL3(20), TGXE(10,10) 
	real wave(100), wgxe(100), sgxe(100), syme(100), fille(100), 
     &	     ftranse(100), delole(100), avrefe(100)
      	INTEGER*2 IGEOM(100,600), IREFLC(100,600), SURFLAG(600), NOJOB

      	COMMON/GUIDE/VL,GX,GZ,DELTA
      	COMMON/GLASS/BETA(100),ABUT(100),CREF(100),GLENG(100),
     &		     GAMMB(100),GAMMA(100)
	COMMON/POLAR/CREFINT,POL_EFF,GAMMA_BEND,GAMMB_BEND,SPIN
     &             GAMMA_BEND_NEW, CREFINT_NEW
        COMMON/ANGG/ANGLI,ANGLF,LABUT,ANGL,AP,BP,CP
      	COMMON/DTO/ISURF,EXDIST
      	COMMON/DIR/VX,VY,VZ
        COMMON/BENDREG/ BD_REG1, BD_REG2
      	COMMON/DEF/X,Y,Z,IREG
      	COMMON/GEOM/NSURF,NREG,IGEOM,SURFLAG
      	COMMON/GEOM/A(600),B(600),C(600),D(600),E(600),F(600),G(600),
     &		    P(600),Q(600),R(600)
      	COMMON/TES/IN
      	COMMON/SUPERMIRROR/XSM, FSM, NDATA

	LOGICAL IN
	EXTERNAL TAY         

*	OPEN(UNIT=19,FILE='ANG.OUT',STATUS='NEW')

      	OPEN(UNIT=3,FILE='BR.DAT',STATUS='OLD')
	OPEN(UNIT=2,FILE='MC.DAT',STATUS='NEW')
      	OPEN(UNIT=4,FILE='MC.OUT',STATUS='NEW')
      	OPEN(UNIT=7,FILE='FLUX.OUT',STATUS='NEW')
	OPEN(UNIT=5,FILE='SYMMETRY.OUT',STATUS='NEW')
      	OPEN(UNIT=9,FILE='SUMMARY.OUT',STATUS='NEW')
      	OPEN(UNIT=11,FILE='EXIT.OUT',STATUS='NEW')
      	OPEN(UNIT=13,FILE='SAMPLE.OUT',STATUS='NEW')

*	open(unit=19,file='flight-path.dat',status='new')

* ====> Remember 1 st surface must be guide entrance, while 2 nd surface must
*	be sample plane in the coordinate system situated at the guide exit.

* Warm up random generator here

	DO I = 1, 1000
		CALL G05DAF(-1.,1.)
	ENDDO                  

* Reading in supermirror data

	OPEN(UNIT=45,FILE='s_g:sm.dat',STATUS='old')

       	READ(45,*) NDATA
	
       	DO i = 1, NDATA
		READ(45,*) XSM(i), FSM(i)
	ENDDO
                 
	REWIND(45)
	CLOSE(45)

	
* Date time on the VAX

       	ISTATUS = LIB$DATE_TIME(DATETIME)
       	HANDLE  = 0
       	ISTATUS = LIB$INIT_TIMER(HANDLE)

* Reading in parameters

	READ(3,112)NAME 
	READ(3,*)
	READ(3,*)
       	READ(3,100) NHIST,NSURF,NREG

       	DO I = 1, NSURF
			READ(3,*)
			READ(3,*)
			READ(3,*)
*     			READ(3,109) A(I),B(I),C(I),D(I),E(I)
*      			READ(3,109) F(I),G(I),P(I),Q(I),R(I)
     			READ(3,*) A(I),B(I),C(I),D(I),E(I)
      			READ(3,*) F(I),G(I),P(I),Q(I),R(I)
	ENDDO

	READ(3,*)
	READ(3,*)
       	DO I = 1, NREG
		READ(3,*)
		READ(3,*)
     		READ(3,102)(IGEOM(I,J), J = 1, NSURF)
     	ENDDO

	READ(3,*)
	READ(3,*)
	READ(3,*)
	READ(3,*)
	READ(3,*)

       	DO I = 1, NREG
		READ(3,*)
		READ(3,*)
	     	READ(3,102) (IREFLC(I,J),J = 1, NSURF)
	ENDDO

	READ(3,*) 
	READ(3,*) 
	READ(3,*) 
       	READ(3,101) VL,GX,GZ
	READ(3,*) 
	READ(3,*) 
	READ(3,108) MX,MZ
	READ(3,*) 
	READ(3,*) 
	READ(3,108) SX,SZ
	READ(3,*) 
	READ(3,*) 
	READ(3,*) 
       	READ(3,130) THETA,X1,Y1
	READ(3,*) 
	READ(3,*) 
	READ(3,*) 
       	READ(3,104) NWAV,WAV0,DWAV
	READ(3,*) 
	READ(3,*) 

	DO I = 1, NREG
		READ(3,*) 
		READ(3,*) 
       		READ(3,107) BETA(I), CREF(I), ABUT(I), GLENG(I), GAMMB(I)
	ENDDO

	READ(3,*)
	READ(3,*)
       	READ(3,99) FI
	READ(3,*)
	READ(3,*)
	READ(3,*)
*       READ(3,99) BEETA
       	READ(3,99) CONE

*	Reading in values for SURFLAG

	READ(3,*)
	READ(3,*)
	READ(3,102) (SURFLAG(I), I=1,NSURF)
                         	
*	Reading in the critical angle per unit wavelength for 
*	for the polarizing bender surfaces

	READ(3,*)
*	READ(3,*)
	READ(3,*)
	READ(3,*) GAMMB_BEND, CREFINT, POL_EFF
*, bd_reg1, bd_reg2

       	CLOSE(3)

************************
*	Checking to see if any region is a bender
	open(unit=25,file='bender.in',status='old')                 
        read(25,*)
	read(25,*)bd_reg1,bd_reg2
        close(25)
************************
	
*  	Output for VAX
	
      	WRITE(*,214) DATETIME, NAME
      	WRITE(2,214) DATETIME, NAME
	WRITE(7,112) NAME
	WRITE(9,112) NAME
*	WRITE(11,112) NAME
*	WRITE(13,112) NAME
      	WRITE(*,200) NHIST, NSURF, NREG
      	WRITE(2,200) NHIST, NSURF, NREG
	WRITE(2,*)
	WRITE(2,202) 
     	WRITE(2,203) VL, GX, GZ, MX, MZ, SX, SZ
	WRITE(2,*)
	WRITE(2,201) 
      	WRITE(2,217) THETA, X1, Y1
	WRITE(2,*)
	WRITE(2,206)
      	WRITE(2,209) NWAV, WAV0, DWAV
	WRITE(2,*)
      	WRITE(2,230) FI
	WRITE(2,*)
      	WRITE(2,231) CONE
      	WRITE(2,215)

	DO I = 1, NREG
	      	WRITE(2,220) I, BETA(I), CREF(I), ABUT(I), 
     &			     GLENG(I), GAMMB(I)
	ENDDO

      	COST = DCOS(THETA)
      	SINT = DSIN(THETA)

*	POL_EFF = POL_EFF/100

* Converting "FI" from degrees to radians.

      	FI = FI * 0.017453293  
      	TFI = DTAN(FI)
      	CFI = DCOS(FI)

* Initialize all counters to zero

      	EPSI = 0.01
      	TIMEA = 0.0

* do i = 1, ntimes

      	DO 11 IWAV = 1, NWAV
       		WAV = (IWAV-1) * DWAV + WAV0
      		NIL = 0
      		NENTL = 0
      		NSTART = 0
      		WGX = 0.0
      		WNPATH = 0.0
      		WNREFT = 0.0
      		WLOSS = 0.0
                WABSORB = 0.0
                NABSORB = 0
      		DO I = 1, 10
      			DO J = 1, 10
      				TGX(I,J) = 0.0
   				TS(I,J) = 0.0
      				TGXE(I,J) = 0.0
   				TSE(I,J) = 0.0
			ENDDO
		ENDDO
                   
	SPINDW = 0
	SPINUP = 0


* Set the critical angle.


		GAMMA_BEND = GAMMB_BEND * WAV

		PI = 3.14159265359
      		DO I = 1, NREG
      			GAMMA(I) = GAMMB(I) * WAV
		ENDDO       

* The following possibility can be of interest mainly in the case of an
* angular dependent reflectivity or a straight guide. 

*		CONE = (CONE_ANGLE*PI)/(GAMMA(1)*WAV*180.) 

        	DELTA = CONE * GAMMA(1)
*		PHIWAV = TAY(WAV)*(9.0668e-04)
*		WRITE(*,*) ' USING HYDROGEN MODERATOR'
		PHIWAV = 1.e+5
		WRITE(*,*) ' USING FLAT MODERATOR'
        	WTC = GX * GZ * 4.0 * DELTA * DELTA * PHIWAV
        	VLM1 = 0.
        	VLM2 = 0.
        	NFINI = 0

	        	DO 6 IHIST = 1, NHIST
	IF(IHIST/1000.EQ.IHIST/1000.)THEN
		WRITE(*,*) 'NEUTRON HISTORY NUMBER:  ',IHIST
	ENDIF
			WT = WTC
        		VLHIST = 0.
        		NREF   = 0
        		CALL START

*	PRINT*,'CALLING START'

* We now have the starting coordinates: X, Y, Z, VX, VY and VZ on a plane
* at the guide entrance. We first see if it will enter the guide system.

		IF(G05DAF(0.,1.).GT.0.5) THEN
			SPIN = 0.5
		ELSE
			SPIN = -0.5
		ENDIF
		
*	PRINT*,SPIN

        		XE = X
        		YE = Y
        		ZE = Z

!	call moveit(epsi, wav)

        		X = X + VX * EPSI
        		Y = Y + VY * EPSI
        		Z = Z + VZ * EPSI

        		CALL WHICHR
        		IF(IREG.EQ.0) GO TO 62

* We now have an acceptable neutron. Now trace its trajectory back to 
* the moderator plane to see if it was available.

      			VP = - (YE - XE*TFI) / (VY - VX*TFI)
      			XM = XE + VP*VX
      			ZM = ZE + VP*VZ
      			IF(DABS(XM).GT.(MX*CFI/2.0)) GO TO 61
      			IF(DABS(ZM).GT.(MZ/2.0))  GO TO 61
      			VLHIST = EPSI
      			IREG = 0
      			NSTART = NSTART+1
3   			LASTRG = IREG
*	print*,'point1:',ireg
      			CALL WHICHR
*        print*,'point2:',ireg
      	
* Branch if neutron is outside guide

      			IF(IREG.EQ.0) then
			GOTO 20
			ENDIF

4  			CALL DTOEX

*	IF(SURFLAG(ISURF).gt.0.0) THEN
*	IREG = 13
*	ENDIF
			CALL TESTIN
       			IF(IN) GO TO 12

* Here for a pathological way
			
      			WNPATH = WNPATH + WT
      			GO TO 6
12  	CONTINUE
                 
      	IF(IREFLC(IREG,ISURF).EQ.1.0) GO TO 10
	IF(SURFLAG(ISURF).gt.0.0) GOTO 10	

* the next few lines move the neutron along vx,vy,vz to the
* edge of the guide then a small distance epsi to take neutron 
* outside the guide

5   	X = X + VX * (EXDIST + EPSI)
      	Y = Y + VY * (EXDIST + EPSI)
        Z = Z + VZ * (EXDIST + EPSI)

!	call moveit(exdist+epsi, wav)	

        VLHIST = VLHIST + EXDIST + EPSI
        GO TO 3

* Here for a reflection. We first transport neutron to point on surface, 
* then use subtended angle to check if it is in allowed angular range. 
* If permitted subroutine RFN is used to reflect the neutron direction
* cosines 

10 	CONTINUE
      	X = X + VX*EXDIST
     	Y = Y + VY*EXDIST
      	Z = Z + VZ*EXDIST

!	call moveit(exdist, wav)

      	CALL WOBBLE

*  	VAX double precision ARC SINE

      	ANGL = DASIN(AP*VX + BP*VY + CP*VZ)

*	Check if incident angle is less than critical angle
	
        INTERREF = 0.0
	
*	IF(SURFLAG(ISURF).EQ.0.0) THEN
*        	IF(DABS(ANGL).GT.GAMMA(IREG)) GOTO 21
*        else
*		IF(DABS(ANGL).GT.GAMMA_BEND_NEW) GOTO 21
*        endif

	CALL INTER(WAV,INTERREF)

*	if(interref.eq.0.0) goto 21

	CREF(IREG) = INTERREF

*	interref = cref(ireg)
*	print*,'cref of region ',ireg,' is ',cref(ireg)
****************************************************************

*	in the next few lines maybe add the check for surflag

*	If surflag of surface isurf that neutron is incident with is
*	equal to 0 then ==> normal surface.

	IF(SURFLAG(ISURF).EQ.0.0) GOTO 22
                                                    
****************************************************************	
*	Treatment for considering glass thickness.
                                    
*	Surflag for a Polarizing = 2
*	Surflag for a Normal = 1 

*	PRINT*,'We shouldn t be here!!!!!!!!'        
          
	IF(SURFLAG(ISURF).EQ.1.0) THEN
*	===> NORMAL
		IF(ANGL.LT.0.0) GOTO 22

		IF(ANGL.GT.0.0) THEN
*	Ending neutron history (inside glass)	
	        GOTO 21
        	ENDIF
	ENDIF

        IF(SURFLAG(ISURF).EQ.2.0) THEN   
*	===> POLARIZING
        	IF(ANGL.GT.0.0) GOTO 24

		IF(ANGL.LT.0.0) THEN
*	Ending neutron history (inside glass)                
		GOTO 21
		ENDIF
	ENDIF
        
	print*,'I don t know what has happened'

*****************************************************************
                                                                
*	Reflection treatment using polarizing surface parameters

24      CONTINUE

*	Removing this line means that all polarizing surfaces will "polarize"
	IF(POL_EFF.EQ.0.0) GOTO 22

*	PRINT*,'Reflection from a polarizing surface'
	
	GAMMA_BEND_NEW = GAMMA_BEND
*	CREFINT_NEW = CREFINT

	CREFINT_NEW = INTERREF

*	print*,'spin of n in polarizing surface:',spin

	IF(SPIN.LT.0) THEN
*	PRINT*,'SPIN IS DOWN ==> ENDING'
	GOTO 21
	ENDIF

*	An alternative way of doing the above.

*	IF(SPIN.LT.0.0) THEN
*	GAMMA_BEND_NEW = GAMMA_BEND*0.0
*	CREFINT_NEW = 0.0
*	ENDIF

	IF(DABS(ANGL).GT.GAMMA_BEND_NEW) GOTO 21
	LABUT=1
	IF(ABUT(IREG).NE.0.) CALL ABUTL2
	IF(LABUT.EQ.0) GOTO 21

        CALL RFN
	NREF = NREF + 1
*	WT = WT*CREFINT_NEW
*	WLOSS = WLOSS + WT*(1.0 - CREFINT_NEW)
	WT = WT*INTERREF
	WLOSS = WLOSS + WT*(1.0 - INTERREF)
        GOTO 19		

***************************************************************
*	Normal reflection off a surface 

22	CONTINUE

*	This line means that all surfaces are polarizing
*	IF(SPIN.LT.0) GOTO 21

*	Removing the next line for a test

        IF(DABS(ANGL).GT.GAMMA(IREG)) GOTO 21
	LABUT=1
	IF(ABUT(IREG).NE.0.) CALL ABUTL2
	IF(LABUT.EQ.0) GOTO 21

	CALL RFN
	NREF = NREF + 1
*	WT = WT*CREF(IREG)
*	WLOSS = WLOSS + WT*(1.0 - CREF(IREG))
	WT = WT*INTERREF
	WLOSS = WLOSS + WT*(1.0 - INTERREF)
                                              

*****************************************************************

19	CONTINUE	

*	IF(SPIN.LT.0.) THEN
*	PRINT*,'IREG=',IREG,' ISURF=',ISURF
*	ENDIF


*	Move neutron by "epsi" in the new direction to take them away from the 
*	surface

        X = X + EPSI*VX
        Y = Y + EPSI*VY
        Z = Z + EPSI*VZ

!	call moveit(epsi, wav)

        VLHIST = VLHIST + EXDIST + EPSI
	GOTO 4

*	Here when neutron outside guide assembly.
*	If neutron is leaving the highest numbered segment through a
*	non-reflecting surface, then the end of the guide has been reached.
*	Otherwise the neutron is assumed to have left through the side of the
*	guide.

20      CONTINUE

        IF(LASTRG.EQ.NREG) THEN 
*        PRINT*,'NREG=',NREG
*	PRINT*,'LASTRG=',LASTRG
*	PRINT*,'LASTRG=NREG ==> LEAVING GUIDE'
        GO TO 30 
	ENDIF

21      WLOSS = WLOSS + WT
*	PRINT*,'NEUTRON LOST'
        GO TO 63

*	Here when leaving the guide exit (gx)

30      CONTINUE

        XD = (X-X1)*COST - (Y-Y1)*SINT
        YD = (X-X1)*SINT + (Y-Y1)*COST
        VXD= VX*COST - VY*SINT
        VYD = VX*SINT + VY*COST
        X = XD
        Y = YD
        VX = VXD
        VY = VYD


        WGX = WGX + WT


*	Check the spin state of the neutrons

*	print*,'spin is ',spin

	IF(SPIN.EQ.0.5) THEN
*	print*,'spin is +ve'	
	SPINUP = SPINUP + 1
	ENDIF

	IF(SPIN.LT.0.) THEN
	SPINDW = SPINDW + 1
*	print*,'spin is -ve'
	ENDIF


*	Now bin the neutrons at the guide exit.

        CALL BIN(WT,X,Z,GX,GZ,TGX,10,10)

*	Now transport to the sample plane.

        DD = DIST(2)

        VLHIST = VLHIST + DD
        X = X + VX*DD
        Z = Z + VZ*DD

*	write(19,*) vlhist

*	PRINT*,'NEUTRON @ SAMPLE'

*	Final check on spin
	
*	IF(POL_EFF.EQ.1.0.AND.SPIN.EQ.-0.5) THEN
*	PRINT*,'There is an up spin at the sample plane!!!'
*	ENDIF


*	Now bin neutrons at sample plane.

        CALL BIN(WT,X,Z,SX,SZ,TS,10,10)

        WNREFT = WNREFT + NREF*WT
        VLM1 = VLM1 + VLHIST*WT
        VLM2 = VLM2 + VLHIST*VLHIST*WT
        GO TO 63
61      NIL =NIL +1
        GO TO 63
62      NENTL = NENTL + 1
63      CONTINUE
6	ENDDO

      	IF(WGX.NE.0)GO TO 177

	PRINT*,' VLHIST = ', VLHIST	

      	VLM1=VLHIST*WTC
      	VLM2=VLHIST*VLHIST*WTC
      	WGX=WTC


      	WRITE(6,178)
      	WRITE(2,178)
178     FORMAT(1X,'FOR THIS WAVE LENGTH NO NEUTRON WAS TRANSMITTED')
177     CONTINUE

*	Above three lines inserted on 07.08.1985

      	WRITE(*,219)
      	WRITE(2,219)

	PRINT*,'NSTART:',NSTART
        PRINT*,'NENTL :',NENTL

        SIGMAL = DSQRT((VLM2 - (VLM1*VLM1/WGX))/WGX)
!        DELOL = (SIGMAL*WGX)/VLM1

	lmean = vlm1/wgx
        delol = sigmal/lmean
	
        FILL = (1.0*NSTART/(NHIST-NENTL))
        FTRANS = WGX/(NSTART*WTC)

        DO 7 I=1,10
       		DO 7 J=1,10
       		TGX(I,J) = TGX(I,J)/NHIST
7    		TS(I,J) = TS(I,J)/NHIST

        DO 16 I=1,10
        	TXX(I) = 0.0
      		DO 15 J=1,10
15  		TXX(I) = TXX(I) + TGX(I,J)
16  		WRITE(4,1400)TXX(I)
      
*	PRINT*,'WABSORB = ',WABSORB
*        PRINT*,'NO. ABSORBED =',NABSORB

	AVREF = WNREFT/WGX
        NPATH = WNPATH/WTC
        NLOST = WLOSS/WTC
        NFINI = WGX/WTC
        WGX = WGX/NHIST

        WRITE(6,208)
        WRITE(2,208)
        WRITE(6,210) WAV,NENTL,MX,NIL,MZ,NSTART,GX,NLOST,GZ,NFINI,
     $  SX,FILL,SZ,FTRANS,DELOL,AVREF,NPATH
        WRITE(2,210) WAV,NENTL,MX,NIL,MZ,NSTART,GX,NLOST,GZ,NFINI,
     $  SX,FILL,SZ,FTRANS,DELOL,AVREF,NPATH
        WRITE(4,1200)WAV
        WRITE(4,1300)FTRANS
        WRITE(4,1200)AVREF
        WRITE(6,211)
        WRITE(2,211)
        WRITE(6,204) ((TGX(I,J),I=1,10),J=1,10)
        WRITE(2,204) ((TGX(I,J),I=1,10),J=1,10)
        WRITE(6,207) TXX, WGX	
        WRITE(2,207) TXX, WGX

*	WGX = 0.0
	SGX = 0.0      	
	ESGX = 0.0      	
	DO I=1,10
      		TXX(I) = 0.0
      	      	DO J=1,10
  			TXX(I) = TXX(I) + TS(I,J)
		ENDDO 
  		WRITE(4,1400)TXX(I)
		SGX = SGX + TXX(I)
	ENDDO
	
***	Calculating and writing the symmetry at sample plane

	DO I = 1, 5
		TXXL = TXXL + TXX(I)
		TXXR = TXXR + TXX(I + 5)
	ENDDO
	
	PRINT*,'TXXR =',TXXR
	PRINT*,'TXXL =',TXXL

*	if(txxr.eq.0.or.txxl.eq.0) goto 11
	if(txxr.eq.0.or.txxl.eq.0) goto 13746

	SYM = (TXXR/TXXL)*100.

13746   CONTINUE

	print*,'sym = ',sym
        
	IF(IWAV.EQ.1)THEN
		WRITE(5,303)
		WRITE(5,*)
	ENDIF
	WRITE(5,304) WAV, SYM 

*
 
	WRITE(6,204) ((TS(I,J),I=1,10),J=1,10)
      	WRITE(2,204) ((TS(I,J),I=1,10),J=1,10)
      	WRITE(6,212) TXX, SGX
      	WRITE(2,212) TXX, SGX

* Calculating the flux through the sample.

	FSGX = SGX/(SX*SZ)
	WRITE(2,412) FSGX
	FSGX = FSGX * 1.E+06

* Printing the number of neutrons with each spin state
	PRINT*,'UP SPINS   =',SPINUP
	PRINT*,'DOWN SPINS =',SPINDW


*	IF(IWAV.EQ.1)THEN
*		WRITE(14,314)
*		WRITE(14,*)
*	ENDIF

*	WRITE(14,414) WAV, FSGX

***        

* Calculation of elapsed time etc... for VAX

	WRITE(6,216) 
	ISTATUS = LIB$SHOW_TIMER(HANDLE)

	WAV = WAV 
	WGX = WGX * 1.E+06 
	SGX = SGX * 1.E+06 

	IF(IWAV.EQ.1)THEN
		WRITE(7,300)
		WRITE(7,*)
		WRITE(9,310)
		WRITE(9,*)
*		WRITE(11,320)
*		WRITE(13,330)
	ENDIF
	WRITE(7,305) WAV, WGX, SGX
	WRITE(9,315) WAV, FILL, FTRANS, DELOL, AVREF	

	wave(iwav) = wav
	wgxe(iwav) = wgx
	sgxe(iwav) = sgx
	syme(iwav) = sym
	fille(iwav) = fill
	ftranse(iwav) = ftrans
	delole(iwav) = delol
	avrefe(iwav) = avref

	DO I = 1, 10
		DO J = 1, 10
			TGXE(I,J) = TGX(I,J) * 1.E+06
			TSE(I,J)  = TS(I,J) * 1.E+06
                ENDDO
	ENDDO

*	WRITE(11,*)
*	WRITE(11,324)WAV
*	WRITE(11,*)
*	WRITE(13,*)
*	WRITE(13,324)WAV
*	WRITE(13,*)

*	DO I = 1, 10
*		DO J = 1, 10
*			WRITE(11,325) I, J, TGXE(I,J)
*			WRITE(13,335) I, J, TSE(I,J)
*                ENDDO
*	ENDDO
11	ENDDO

*	enddo

      	REWIND(2)
      	REWIND(4)
	REWIND(5)
      	REWIND(7)
	REWIND(9)
	REWIND(11)
	REWIND(13)
*	REWIND(14)

*	CLOSE(19)

99  	FORMAT(F10.3)
100  	FORMAT(3I10)
101  	FORMAT(3F10.3)
102  	FORMAT(40I2)
103  	FORMAT(F5.2)
104  	FORMAT(I10,2F10.2)
106  	FORMAT(20A4)
107  	FORMAT(5F15.6)
108  	FORMAT(2F10.3)
109  	FORMAT(5E15.6)
112	FORMAT(A40)
130  	FORMAT(D18.11,2F14.7)
155  	FORMAT(20A4)
200  	FORMAT(/5X,'NO. OF NEUTRON HISTORIES =',I8/
     $ 		5X,'NO. OF SURFACES =',I8/
     $ 		5X,'NO. OF REGIONS = ',I8)
201  	FORMAT('ANGLE WITH RESPECT TO "Y" AXIS AND',/,
     $	       ' (X,Y) COORDINATES OF GUIDE EXIT.')
202	FORMAT('"Y" COORDINATE OF GUIDE ENTRANCE, GUIDE WIDTH',  
     $	       ' AND GUIDE HEIGHT.',/,'MODERATOR WIDTH AND HEIGHT,',
     $         ' SAMPLE WIDTH AND HEIGHT.')
203  	FORMAT(5X,7F10.2)
204  	FORMAT(/2X,10F7.1)
206	FORMAT('NUMBER OF WAVELENGTHS, FIRST WAVELENGTH AND WAVELENGTH',
     $         ' INCREMENT.')
207  	FORMAT(/2X,10F7.1,5X/5X,'TOTAL NEUTRONS/SEC =',F14.7,' x10^6'/)
208  	FORMAT(1H1)
209  	FORMAT(5X,I8,2F8.2)
210  	FORMAT(5X,'WAVELENGTH =',F6.2,' ANGSTROMS',
     $ 	T45,' NENTL =',I6/
     $ 	5X,'MODERATOR  X-DIMENSION =',F6.2,' CM',
     $ 	T45,'   NIL =',I6/
     $ 	5X,'MODERATOR  Z-DIMENSION =',F6.2,' CM',
     $ 	T45,'NSTART =',I6/
     $ 	5X,'GUIDE      X-DIMENSION =',F6.2,' CM',
     $ 	T45,' NLOST =',I6/
     $ 	5X,'GUIDE      Z-DIMENSION =',F6.2,' CM',
     $ 	T45,' NFINI =',I6/
     $ 	5X,'SAMPLE     X-DIMENSION =',F6.2,' CM',
     $ 	T45,' ILLUMINATION =',F8.5/
     $ 	5X,'SAMPLE     Z-DIMENSION =',F6.2,' CM',
     $ 	T45,' TRANSMISSION =',F8.5/
     $ 	T45,'    DL/L =',E12.3/
     $ 	T45,' NO. REFN/NEUT =',F6.2/
     $ 	T45,' NO. PATH. TRAJ.=',I6)
211  	FORMAT(5X,' NEUTRON INTENSITIES IN M. NEUTRONS/S CROSSING BIN '/
     $ 'ASSUMING  1.0E11  N.CM-2.STER-1 ON MODERATOR SURFACE')
212  	FORMAT(/2X,10F7.1,5X/5X,'TOTAL NEUTRONS/SECOND AT SAMPLE =',
     $	F14.7,'x10^6'/)
214  	FORMAT(/' Date & time of run: ',A20/A20)
215 	FORMAT(/' REG. SURF.IRR.  REF.COEF.  ABUT.S.D.  GLASS LENGTH')
216 	FORMAT(/' This step used the following:')
217 	FORMAT(3F20.10)
219  	FORMAT(/,' MCGUIDE : MK 5.0-inter  15/10/95')
220 	FORMAT(I4,F10.5,F10.5,2X,F10.5,2X,F10.3,F10.5)
230 	FORMAT(1X,'ANGLE OF GUIDE TO MODERATOR NORMAL=',F5.2)
231 	FORMAT(1X,'WE ACCEPT NEUTRONS WITHIN AN ANGULAR RANGE OF',F5.2,/
     $        ' TIMES THE CRITICAL ANGLE')
300	FORMAT(4X, 'WAVELENGTH', 8X, 'N/SEC', 10X, 'N/SEC @ SAMPLE') 
303	FORMAT(4X, 'WAVELENGTH', 8X, 'SYMMETRY')
304	FORMAT(5X, F7.3, 10X, F7.3)
305	FORMAT(5X, F7.3, 5X, E13.6, 7X, E13.6) 
310	FORMAT(4X, 'WAVELENGTH', 2X, 'ILLUMINATION', 2X, 'TRANSMISSION', 7X,
     $	      'DL/L', 4X, 'REFLECTIONS')
314	FORMAT(4X, 'WAVELENGTH', 10X, 'FLUX @ SAMPLE')
315	FORMAT(5X, F7.3, 7X, F6.4, 8X, F6.4, 6X, E10.3, 5X, F5.2) 
320	FORMAT(7X, 'I', 13X, 'J', 21X, 'BINNED FLUX @ GUIDE')
324	FORMAT(5X,'WAVELENGTH:   ', F6.2)
325	FORMAT(4X, I4, 10X, I4, 24X, E13.6)
330	FORMAT(7X, 'I', 13X, 'J', 21X, 'BINNED FLUX @ SAMPLE')
335	FORMAT(4X, I4, 10X, I4, 24X, E13.6)
412  	FORMAT(/5X,'TOTAL FLUX AT SAMPLE =',
     $	F14.7,'x10^6'/)
414	FORMAT(5X, F7.3, 11X, E13.6)
1200 	FORMAT (F6.2)
1300 	FORMAT (F8.5)
1400 	FORMAT (F7.1)    

	RETURN
      	END


***********************************************
* Picks a random starting position and vector
***********************************************

        SUBROUTINE START
        IMPLICIT REAL (A-H,O-Z)
        REAL G05DAF
        COMMON/GUIDE/VL,GX,GZ,DELTA
        COMMON/DIR/VX,VY,VZ
        COMMON/DEF/X,Y,Z,IREG
	X = G05DAF(-1.,1.)*GX/2.0
        Y = VL
	Z = G05DAF(-1.,1.)*GZ/2.0
        VX = DSIN(G05DAF(-1.,1.)*DELTA)
        VZ = DSIN(G05DAF(-1.,1.)*DELTA)
        VY = DSQRT(1.0 - VX*VX -VZ*VZ)
        RETURN
        END


****************************************************************
*	Finds which region X,Y,Z is in & returns region in IREG.
*	If more than one region IREG set to -1
*	If no region, returns IREG = 0
****************************************************************

        SUBROUTINE WHICHR
        IMPLICIT REAL (A-H,O-Z)
        INTEGER*2 IGEOM(100,600), SURFLAG(600)
        COMMON/TES/IN
        COMMON/DEF/X,Y,Z,IREG
        COMMON/GEOM/NSURF,NREG,IGEOM,SURFLAG
        COMMON/GEOM/A(600),B(600),C(600),D(600),E(600),F(600),G(600)
     $  ,P(600),Q(600),R(600)
        LOGICAL IN,FOUND
        FOUND=.FALSE.
        IT=0
        DO 1 IREG=1,NREG
        CALL TESTIN
        IF(.NOT.IN) GOTO 1
        IF(IN.AND.FOUND) GOTO 2
        IT=IREG
        FOUND=.TRUE.
1  	CONTINUE
      	IREG=IT
      	RETURN
2  	IREG=-1
      	RETURN
      	END


***********************************************
* Tests whether a point X,Y,Z is in region IREG
***********************************************

        SUBROUTINE TESTIN
        IMPLICIT REAL (A-H,O-Z)
        INTEGER*2 IGEOM(100,600), SURFLAG(600)
        COMMON/TES/IN
        COMMON/DEF/X,Y,Z,IREG
        COMMON/GEOM/NSURF,NREG,IGEOM,SURFLAG
        COMMON/GEOM/A(600),B(600),C(600),D(600),E(600),F(600),G(600)
     $  ,P(600),Q(600),R(600)
        LOGICAL IN
        IN=.TRUE.
        DO 1 I=1,NSURF

        IF(IGEOM(IREG,I).EQ.0) GOTO 1

        PP=A(I)*X*X+B(I)*X+C(I)*Y*Y+D(I)*Y+E(I)*Z*Z+F(I)*Z+G(I)
     $     +P(I)*X*Y+Q(I)*Y*Z+R(I)*X*Z
        IF(PP*IGEOM(IREG,I).LT.0) GOTO 2
1       CONTINUE
        RETURN
2       IN=.FALSE.
        RETURN
        END


***********************************************


        SUBROUTINE WOBBLE
        IMPLICIT REAL (A-H,O-Z)
        REAL G05DAF
        REAL EXDIST
        INTEGER*2 IGEOM(100,600), SURFLAG(600)
        COMMON/GLASS/BETA(100),ABUT(100),CREF(100),GLENG(100),GAMMB(100)
     $  ,GAMMA(100)
        COMMON/DTO/ISURF,EXDIST
        COMMON/DIR/VX,VY,VZ
        COMMON/DEF/X,Y,Z,IREG
        COMMON/GEOM/NSURF,NREG,IGEOM,SURFLAG
        COMMON/GEOM/A(600),B(600),C(600),D(600),E(600),F(600),G(600)
     $  ,P(600),Q(600),R(600)
        COMMON/ANGG/ANGLI,ANGLF,LABUT,ANGL,AP,BP,CP

*	Let the equation of the local plane T X,Y,Z be 
*	AP*X + BP*Y + CP*Z +DP = 0

        I = ISURF
        AP = 2*A(I)*X + B(I) + P(I)*Y + R(I)*Z
        BP = 2*C(I)*Y + D(I) + P(I)*X + Q(I)*Z
        CP = 2*E(I)*Z + F(I) + Q(I)*Y + R(I)*X
        CALL NORM(AP,BP,CP)
        DOTP = AP*VX + BP*VY + CP*VZ
        ANGL = DABS(DASIN(DOTP))
        ANGLI = ANGL
        ANGLF = ANGL

*	ANGLI is the incident angle to the perfect surface
*	ANGLF is the reflected angle to the perfect surface
*	This will be changed in the subsequent code if BETA.NE.0
	
        IF(BETA(IREG))2,2,1
1       CONTINUE
        XL = VX - AP*DOTP
        YL = VY - BP*DOTP
        ZL = VZ - CP*DOTP
        CALL NORM(XL,YL,ZL)
        ANGLD2 = ANGL/2.0
        ANGLM = DMIN1(ANGLD2,BETA(IREG))
        DEV = (BETA(IREG)+ANGLM)*G05DAF(0.,1.) - ANGLM
        ANGLF = ANGLI + DEV*2.0

*	The next line changes DEV according to the surface normal direction
*	with respect to the incident neutron.

        DEV = DEV*DOTP/DABS(DOTP)
        DXL = XL*DEV
        DYL = YL*DEV
        DZL = ZL*DEV
        XM = VY*CP - VZ*BP
        YM = VZ*AP - VX*CP
        ZM = VX*BP - VY*AP
        DEV = BETA(IREG)*G05DAF(-1.,1.)
        DXM = XM*DEV
        DYM = YM*DEV
        DZM = ZM*DEV
        AP = AP + DXL + DXM
        BP = BP + DYL +DYM
        CP = CP + DZL + DZM
        CALL NORM(AP,BP,CP)
                                                                        
*	We now have a "wobbled" normal to simulate surface irregularities

2       RETURN
        END

************************************************************************
*	This subroutine reads in expt data for the reflectivity of
*	a supermirror and calculates by interpolation the value of R for
*	a given incident angle 
************************************************************************

	SUBROUTINE INTER(wav,INTERREF)
	INTEGER MMAX, NMAX, I, IFAIL, M, N, R
	integer ndata
	REAL D(500), FSM(500), PF(50), PX(50), XSM(500)
        REAL INTERWAV, INTERREF, ANGL, MVAL,wav
        COMMON/ANGG/ANGLI,ANGLF,LABUT,ANGL,AP,BP,CP
	COMMON/SUPERMIRROR/XSM, FSM, NDATA
	EXTERNAL E01BEF, E01BFF
		
*        WRITE(6,*) 'ANGL = ',ANGL,' MVAL = ',MVAL
	
*        INTERWAV = DABS(ANGL)/MVAL

        INTERWAV = DABS(ANGL)/WAV

*	print*,'wavelength = ',wav

	M = 1

	IFAIL = 0

	CALL E01BEF(NDATA,XSM,FSM,D,IFAIL)

	PX(1) = INTERWAV
     
       	IF(INTERWAV.LT.XSM(1)) THEN
	INTERREF = 1.0
	GOTO 21230
        ENDIF

       	IF(INTERWAV.GT.XSM(NDATA)) THEN
	INTERREF = 0.0
	GOTO 21230
        ENDIF
       
*	PRINT*,'PX = ',PX(1)

	IFAIL = 0
	
	CALL E01BFF(NDATA,XSM,FSM,D,M,PX,PF,IFAIL)
	
	INTERREF = PF(1)	
	
21230	continue
	
*        WRITE(6,*)'INTERREF (in sub)= ',INTERREF

	RETURN 
	END

**********************************************************
* Normalization subroutine
* three real variables are such that A*A + B*B + C*C = 1
**********************************************************


        SUBROUTINE NORM(A,B,C)
        IMPLICIT REAL(A-H,O-Z)
        F = DSQRT(A*A+B*B+C*C)
        IF(F.EQ.0.0) STOP 50
        A = A/F
        B = B/F
        C = C/F
        RETURN
        END

**********************************************************
* Subroutine to handle reflection from a plane surface
**********************************************************

      SUBROUTINE RFN
      IMPLICIT REAL (A-H,O-Z)
      COMMON/ANGG/ANGLI,ANGLF,LABUT,ANGL,AP,BP,CP
      COMMON/DIR/VX,VY,VZ
      DOTP = AP*VX + BP*VY + CP*VZ
      VX = VX - 2*DOTP*AP
      VY = VY - 2*DOTP*BP
      VZ = VZ - 2*DOTP*CP
      RETURN
      END

*****************************************************************
* Calculates the distance (exdist) to the exit of a region (ireg)
* along the direction vx,vy,vz from x,y,z. the exit surface is
* returned in in isurf.
*****************************************************************

      SUBROUTINE DTOEX
      IMPLICIT REAL (A-H,O-Z)
      INTEGER*2 IGEOM(100,600), SURFLAG(600)
      DOUBLE PRECISION EXDIST
      INTEGER BD_REG1, BD_REG2
      COMMON/DTO/ISURF,EXDIST
      COMMON/DIR/VX,VY,VZ
      COMMON/DEF/X,Y,Z,IREG
      COMMON/BENDREG/ BD_REG1, BD_REG2
      COMMON/GEOM/NSURF,NREG,IGEOM,SURFLAG
      COMMON/GEOM/A(600),B(600),C(600),D(600),E(600),F(600),G(600)
     +,P(600),Q(600),R(600)

        EXDIST=100000.0
                 
        DO 1 I=1,NSURF
        
	IF(IREG.EQ.BD_REG1 .OR. IREG.EQ.BD_REG2) THEN
		IF(IGEOM(IREG,I).EQ.0.0 .AND. SURFLAG(I).EQ.0.0) GOTO 1
        else
       		IF(IGEOM(IREG,I).EQ.0) GOTO 1 
	ENDIF
        
69	CONTINUE
	DD=DIST(I)

*	PRINT*,'DD FOR SURFACE',I,'    IS:',DD

        IF(DD.LT.0.0) GOTO 1
        IF(DD.GT.EXDIST) GOTO 1
        ISURF=I

*	PRINT*,'ISURF (RETURNED BY DTOEX):',ISURF

      EXDIST=DD
1	  CONTINUE
      IF(EXDIST.EQ.100000.0) EXDIST=-1.0
      RETURN
      END

**********************************************************
* Function to calculate the distance to the i'th surface
* from the point (x,y,z) along (vx,vy,vz) 
**********************************************************

      FUNCTION DIST(I)

      IMPLICIT REAL (A-H,O-Z)
      INTEGER*2 IGEOM(100,600), SURFLAG(600)
      COMMON/DIR/VX,VY,VZ
      COMMON/DEF/X,Y,Z,IREG
      COMMON/GEOM/NSURF,NREG,IGEOM,SURFLAG
      COMMON/GEOM/A(600),B(600),C(600),D(600),E(600),F(600),G(600)
     &		,P(600),Q(600),R(600)

      AA=A(I)*VX*VX+C(I)*VY*VY+E(I)*VZ*VZ+P(I)*VX*VY+Q(I)*VY*VZ
     &	+R(I)*VX*VZ
      BB=2*(A(I)*VX*X+C(I)*VY*Y+E(I)*VZ*Z)
     &	+B(I)*VX+D(I)*VY+F(I)*VZ+P(I)*(X*VY+Y*VX)
     &	+Q(I)*(Y*VZ+Z*VY)+R(I)*(X*VZ+Z*VX)
      CC=A(I)*X*X+B(I)*X+C(I)*Y*Y+D(I)*Y+E(I)*Z*Z+F(I)*Z+G(I)
     &	+P(I)*X*Y+Q(I)*Y*Z+R(I)*X*Z

! we now have to solve the quadratic equation aa.t.t+bb.t+cc=0

      IF(AA.NE.0.) GOTO 1
      IF(BB.NE.0.) GOTO 2
      DIST=-1.0E4
      RETURN
2	DIST=-CC/BB
      RETURN
1	DD=BB*BB-4*AA*CC
      IF(DD.GE.0.) GOTO 3
      DIST=-2.0E4
      RETURN
3	DIST=(-BB+DSQRT(DD))/(2*AA)
      DISS=(-BB-DSQRT(DD))/(2*AA)
      IF(DISS.GT.0..AND.DIST.GT.0.) GOTO 4
      IF(DISS.LT.0..AND.DIST.LT.0.) GOTO 5
      IF(DIST.GT.0.) RETURN
      GOTO 6
4	IF(DIST.LT.DISS) RETURN
      GOTO 6
5	IF(DISS.LT.DIST) RETURN
6	DIST=DISS
      RETURN

! We have now returned the smallest +ve dist - if there is one

      END

**********************************************************
* Binning routine for guide exit / sample planes
**********************************************************

      SUBROUTINE BIN(WT,X,Y,WX,WY,A,NX,NY)
      IMPLICIT REAL (A-H,O-Z)
      REAL A(NX,NY)
      IX = (X+WX*0.5)/(WX/NX) + 1
      IY = (Y+WY*0.5)/(WY/NY) + 1
      IF(IX.LT.1.OR.IX.GT.NX) RETURN
      IF(IY.LT.1.OR.IY.GT.NY) RETURN
      A(IX,IY) = A(IX,IY) + WT
      RETURN
      END
                            
**********************************************************
* Subroutine to move the neutron by a distance EXDIST
* taking gravity into account       
**********************************************************

	SUBROUTINE MOVEIT(DISTANCE, WAV)
	IMPLICIT REAL (A-H,O-Z)
        REAL V, T, DISTANCE, WAV, VELOCITY
	REAL LIMIT_X, LIMIT_Y, LIMIT_Z
	PARAMETER(GRAV = -9.80665D-10)	! Acceleration due to gravity (cm/us^2)
	COMMON/DIR/VX,VY,VZ
	COMMON/DEF/X,Y,Z,IREG
	
	IF(DISTANCE.EQ.0.0) RETURN 	! Quick ckeck to avoid any errors

        LIMIT_X = X + DISTANCE*VX
        LIMIT_Y = Y + DISTANCE*VY
        LIMIT_Z = Z + DISTANCE*VZ
	
	VELOCITY = (100/WAV)*DSQRT(81.787/5.2276D-06)      ! Velocity in cm/sec
                 
	VX = VELOCITY*VX
	VY = VELOCITY*VY
	VZ = VELOCITY*VZ

	V = DSQRT(VX**2 + VY**2 + VZ**2)

	IF(V.EQ.0.0) RETURN

!	print*,'wavelength = ',wav
!	print*,'DISTANCE = ',DISTANCE
!	print*,' Velocity = ',V

	T = DISTANCE/V      

!	print*,' Time = ',T
            
	X = X + T*VX
	Y = Y + T*VY
	Z = Z + T*VZ + (GRAV/2)*T*T 

	VZ = VZ + GRAV*T

!	PRINT*,' X, Y, Z, (USING TIME) = ',X,Y,Z
!	PRINT*,' X, Y, Z, (USING DISTANCE) = ',LIMIT_X,LIMIT_Y,LIMIT_Z

	VX = VX / VELOCITY
	VY = VY / VELOCITY
	VZ = VZ / VELOCITY

	DISTANCE = 0.0		! Resetting EXDIST so that it's value is not retained

	RETURN
	END


******************************************************************
*  this subrtn. simulates the effects of abutment errors between
*  guide glass segments.
*  it requires:   gleng(ireg)  -  the length of glass pieces in
*                                  the ireg region
*                 angli        -  the incomming angle to the ideal
*                                 surface
*                 anglf        -  the outgoing angle
******************************************************************

      SUBROUTINE ABUTL2
      IMPLICIT REAL (A-H,O-Z)
      REAL G05DAF
      COMMON/GLASS/BETA(100),ABUT(100),CREF(100),GLENG(100),GAMMB(100)
     +,GAMMA(100)
      COMMON/ANGG/ANGLI,ANGLF,LABUT,ANGL,AP,BP,CP
      COMMON/DEF/X,Y,Z,IREG
      COMMON/NOR/PL,PLMN,SIG
      SIG = ABUT(IREG)
      GL = GLENG(IREG)

* pll = prob of landing loss

      PLL = SIG/(2.5066*GL*ANGLI)
      IF(G05DAF(0.,1.).LT.PLL) GO TO 99

* ptl = prob. of take-off loss

      PTL = SIG/(2.5066*GL*ANGLF)
      IF(G05DAF(0.,1.).LT.PTL) GO TO 99
      RETURN
99  	LABUT = 0
      RETURN
      END


***********************************************************************
* Tay(x) calculates the intensity at the moderator for each wavelength.
***********************************************************************

	double precision function tay(x)

	real ache, mass, boltz, temp, rho
	real thermalwave, thermalwavesq, thermalwavecube
	real c1, c2, c3, c4, arg1, expw1w2, arg2num, arg2, expw4w5 
	real wavsq, expthermal, arg3, c1log
	real w1, w2, w3, w4, w5, phi0, alpha, wav, x
	real phiepi, phimax, phifer, scale, phi
	real phifer1, phifer2, phifer3, scalerho   
	real scale3, scale4, scale5, s4, s5, scalew3, scalew2, s2

	ache = 6.6262d-14
	mass = 1.67495d-27
	boltz = 1.3807d-3

	scale = 3.2d+04
	scalerho = 5.55d+02
	scale3 = 5.d-03
	scalew2 = 5.d+01
	s2 = scalew2
	scalew3 = 1.3d+02
	scale4 = 5.d-02
	s4 = scale4
	scale5 = 7.d-03
	s5 = scale5

	w1= 0.107d+01
	w2= 0.90d+00
	w3= 0.100385d+1
	w4= 0.106554d+1
	w5= 0.952889d+00
        rho = 0.996089d+00
	phi0 = 0.101686d+01
	alpha = 0.117703d+01
	temp = 0.978289d+00

	c1 = (ache*ache)/(2*mass)
	c1log = dlog(c1)
	c2 = c1/boltz
	c3 = dsqrt(1.d+03*c1)
	c4 = dsqrt(c2)
	thermalwavesq = c2/(50.*temp)
	thermalwave = dsqrt(thermalwavesq)
	thermalwavecube = thermalwave**3	

	wav = x

	arg1 = (w1*scale3/c3)*wav - w2*s2
	expw1w2 = dexp(arg1)

	arg2num = w4*s4 - (wav/c3)
	arg2 = arg2num/(w5*s5)
	expw4w5 = dexp(arg2)

	wavsq = wav*wav
	arg3 = -thermalwavesq/wavsq
	expthermal = dexp(arg3)

	phifer1 = c1/wav**3
	phifer2 = 1./(1.+expw1w2)    	
	phifer3 = 1.+ (w3*scalew3)/(1.+expw4w5)

	phifer = 2.*phifer1*phifer2*phifer3
	phiepi = 2.*c1**(1.-alpha)*wav**(2.*alpha-3.)
	phimax = 2.*(rho*scalerho)*(thermalwavesq**2/wav**5)*
     *		 expthermal

	phi = scale*phi0*(phimax+phifer*phiepi)
	tay = phi

	return
	end

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            